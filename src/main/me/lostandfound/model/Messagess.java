package me.lostandfound.model;

// Generated 2014-10-29 23:03:33 by Hibernate Tools 3.2.4.GA

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.OneToMany;
import javax.persistence.Transient;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

/**
 * Messagess generated by hbm2java
 */

@Entity
@Table(name = "messagess", schema = "public")
public class Messagess implements java.io.Serializable {

	private Integer id;
	private Users users;
	private MessageSort messageSort;
	private String text;
	private byte[] image;
	private String palce;
	private Date time;
	private String status;
	private String type;
	private Integer count;
	private Set<Comment> comments = new HashSet<Comment>(0);

	public Messagess() {
	}

	public Messagess(Integer id, Users users, MessageSort messageSort,
			String type) {
		this.id = id;
		this.users = users;
		this.messageSort = messageSort;
		this.type = type;
	}

	public Messagess(Integer id, Users users, MessageSort messageSort,
			String text, byte[] image, String palce, Date time, String status,
			String type, Set<Comment> comments) {
		this.id = id;
		this.users = users;
		this.messageSort = messageSort;
		this.text = text;
		this.image = image;
		this.palce = palce;
		this.time = time;
		this.status = status;
		this.type = type;
		this.comments = comments;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	@SequenceGenerator(name = "messagess_seq", sequenceName = "messagess_id_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "messagess_seq")
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	@NotNull
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "messagesort_id", nullable = false)
	@NotNull
	public MessageSort getMessageSort() {
		return this.messageSort;
	}

	public void setMessageSort(MessageSort messageSort) {
		this.messageSort = messageSort;
	}

	@Column(name = "text")
	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	@Column(name = "image")
	@Basic(fetch = FetchType.LAZY)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}

	@Column(name = "palce", length = 50)
	@Length(max = 50)
	public String getPalce() {
		return this.palce;
	}

	public void setPalce(String palce) {
		this.palce = palce;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "time")
	public Date getTime() {
		return this.time;
	}

	public void setTime(Date time) {
		this.time = time;
	}

	@Column(name = "status")
	@Length(max = 3)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "type", nullable = false, length = 3)
	@NotNull
	@Length(max = 3)
	public String getType() {
		return this.type;
	}

	public void setType(String type) {
		this.type = type;
	}
    
    @Column(name = "count")
	public Integer getCount(){
        return this.count;
	}

	public void setCount(Integer count){
		this.count = count;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "messagess", cascade = { CascadeType.REMOVE })
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}


}
